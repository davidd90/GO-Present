Die Programmiersprache Go
17 Juli 2014

David Damm

Michal Ajchman

* Gliederung

- Geschichte
- Syntax und Semantik
- Anwendungsbeispiele
- Verbreitung
- Bewertung
- Ausblick

* Geschichte von Go

* Geschichte von Go

*TODO*

* Wieso eine neue Sprache?

Go enstand aus der Frust über aktuell benutzte Sprachen zur Systemprogrammierung

Die Hauptsächlichen Problemen:

- C und C++ sind _veraltet_
- in den letzten 10 Jahren _keine_andere_Sprache_ für Systementwicklung

*Lösung:* eine neue Sprache soll entwickelt werden

Ziele für die Sprache:

- schnell in der Ausführung und Kompilierung
- einfach
- hardwarenah
- Unterstützung moderner Konzepte

* Syntax und Semantik

* Syntax und Semantik - Einführung

*TODO*

* Syntax und Semantik - Semikolons

- nicht notwendig
- optional um Ausdrücke zu trennen

.play code/semikolon.go

* Syntax und Semantik - UTF-8

- erste Sprache mit voller Unterstützung für Unicode (UTF-8) Zeichenkodierung
- Sonderzeichen sowohl in Kommentaren, als auch im Code erlaubt

*Beispiel*

.play code/utf8.go


* Syntax und Semantik - Variablen

Variablendeklaration sieht wie folgt aus:

	var name typ

- jede Variable wird mit dem _Nullwert_ initialisiert
- Namen werden in _camelCasing_ geschrieben
- exportierte Variablen fangen mit einem _Großbuschstaben_ an
- Deklarationen mehrerer Variablen können zu Blöcken zusammengefasst werden

*Beispiel*

 var (
 	a int
 	b int
 	str string
 )

* Syntax und Semantik - Variablen

- Typ der Variablen kann vom Go-Compiler _selbst_herausgefunden_ werden
- gleichzeitige Deklaration + Wertzuweisung mit dem Zeichen :=

*Beispiel*

 var a int = 15		var a := 15

- Typangabe auch nicht nötig
- *Aber:* nur innerhalb von Funktionen erlaubt

*Konstanten*

- fangen mit Schlüsselwort _const_ an
- nur vom Typ _bool_,_numerisch_ oder _string_

*Beispiel*

 const a string = "I am a constant..."

* Syntax und Semantik - Datentypen

*TODO*

* Syntax und Semantik - primitive Datentypen

*Numerische*Datentypen*

 Typen			    Bit-Tiefe

 int <x>		  	8,16,32,64

 uint <x>			 8,16,32,64

 float<x>			 32,64

 complex <x>		  64,128

 
 


*andere*primitive*Datentypen*

- string (read only)
- bool
- byte
- rune (UTF 8 character)


* Syntax und Semantik - Arrays

- statische Groesse
- Zugriff ueber Index

 var text [5]string

 text[0]= "Hello"
 text[1]= "World"



* Syntax und Semantik - Slices

- Bereich innerhalb eines Arrays

 
 var slice []byte = buffer[100:150] //komplette Variablendeklaration
 var slice = buffer[100:150]        // implizite Deklaration

- interne Struktur:


 type sliceHeader struct {
    Capacity int
    Length int
    ZerothElement *byte
 }

 slice := sliceHeader{
    Capacity:     256
    Length:        50,
    ZerothElement: &buffer[100],
 }
 
* Syntax und Semantik - Structs

- _benutzerdefinierte_ Typen
- Struct besitzt mehrere _Attribute_ (Felder) mit Typ und Wert, die ihn beschreiben
- eine Implementierung vom _ADT-Modell_ (Abstract Data Type)

 type name struct {
    feld1 typ1
    feld2 typ2
    …
 }

- Felder vom _beliebigen_Typ_, auch wieder Structs
- Speicher für einen neuen Struct wird mit Schlüsselwort _new_ reserviert

*Beispiel*

 t *T = new (T)
 t := new(T)

* Syntax und Semantik - Structs

*TODO*: Code-Beispiel

* Syntax und Semantik - Zeiger

- aus C uebernommen

 func zero(xPtr *int) {
    *xPtr = 0
 }
 func main() {
    x := 5
    zero(&x)
    fmt.Println(x) // x is 0
 }

* Syntax und Semantik - Funktionen

.code code/function.go

* Syntax und Semantik - Kontrollstrukturen - If-Anweisung

.code code/if_code.go

* Syntax und Semantik - Kontrollstrukturen - Schleifen

- nur for-Schleifen

.code code/loop.go

* Syntax und Semantik - Objectorientierung in Go

- keine Klassen und keine Vererbung
- objektorientierte als auch funktionale Elemente

.play code/rechteck.go



* Syntax und Semantik - Kapselung

- structs können im gesamten Modul benutzt werden
- structs mit grossem Anfangsbuchstaben auch ausserhalb

 Vererbung

.play code/vererbung.go

* Syntax und Semantik - Mehrfachvererbung

.code code/mehrfachvererbung.go

* Syntax und Semantik - Interfaces

- bestehen aus Liste von Funktionen
 
.code code/interface_1.go

- Implementierung wird nicht explizit angegeben

 
.code code/interface_2.go

* Syntax und Semantik - channels und goroutines

Prinzip für paralleles Programmieren:

_"Do_not_communicate_by_sharing_memory._Instead,_share_memory_by_communicating."_

- es gibt low-level Befehle zum Sperren und Entsperren von gemeinsam genutzten Daten
- *Aber*: diese sollen nur in hardwarenahen Programmen benutzt werden
- für gewöhnliche Prozesssynchronisation implementiert Go das sog. _message_passing_modell_

*goroutines*

- Teile des Programms, welche parallel ausgeführt werden
- sind nicht gleich Threads, eine goroutine wird aber auf 1 bis n Threads abgebildet
- durch internen Scheduler verwaltet

* Syntax und Semantik - goroutines

- goroutines sind _sehr_leichgewichtig_ und _billig_ zu erstellen
- _hunderttausende_ gleichzeitig aktive goroutines nicht ungewöhnlich
- administriert durch die Laufzeitumgebung
- laufen alle im _selben_Speicherbereich_
- implementiert als eine _Methode_
- gestartet mit dem Befehl _go_

*Beispiel*

 go summe(großesArray)

- Nachrichtenaustausch zw. goroutines mit Hilfe von _channels_

* Syntax und Semantik - Channels

- ein _Kommunikationskanal_ zw. goroutines
- übertragen Daten ohne auf geteilte Variable zurückzugreifen
- Synchronisation: _nur_eine_ goroutine kann gleichzeitig senden oder empfangen

*Format:*

 var name chan datentyp

- überträgt nur Daten vom Typ _datentyp_ *aber:* alle Datentypen erlaubt, _auch_channels_
- funktioniert nach FIFO-Prinzip

*Senden*

 kanal <- nachricht

*Empfangen*
 
 variable = <- kanal

* Syntax und Semantik - channels und goroutines - Beispiel

*TODO:* Code-Beispiel zur channels und goroutines

* Anwendungsbeispiele


* Anwendungsbeispiele - Firmen, die Go nutzen

.image resources/Dropbox.png _ 100 
.image resources/Google.png _ 200
.image resources/apple.jpg _ 200
.image resources/intel.jpg _ 200


* Anwendungsbeispiele - Docker

.image resources/docker_logo.png

- open-source-Programm zur Erstellung von Software-Containers
- verpackt eine Applikation samt allen Abhängigkeiten in einen virtuellen Container, der auf jedem Linux-Server laufen kann
- ähnlich einer virtuellen Machine, aber leichtgewichtiger und einfacher
- in Go entwickelt

* Anwendungsbeispiele - Docker

.image resources/docker_anwendung.png 576 768

* Anwendungsbeispiele - Diese Präsentation

*TODO*

* Verbreitung

* Verbreitung - RedMonk

.image resources/redmonk-rank.png _ 900

* Verbreitung - Tiobe

.image resources/tiobe.png _ 800

* Bewertung

* Bewertung - Vorteile

_Für_unerfahrene_Programmierer:_
- leicht zu lernen
- kleiner Sprachumfang
- Garbage Collection
- Laufzeitumgebung und Scheduler, die geteilten Ressourcen verwalten

_Für_erfahrene_Programmierer:_
- prozedural oder objektorientiert einsetzbar
- gute Unterstützung für Netzwerkkommunikation
- goroutines und channels für paralleles Programmieren
- Bibliotheken für hardwarenahes Programmieren

_Für_Alle:_
- sehr schnelle Kompiliergeschwindigkeit
- schnelle Ausführung
- cross-compiling
- UTF-8

* Bewertung - Nachteile

- recht neue Programmiersprache
- Dokumentation und einige technische Aspekte noch mangelhaft
- keine generics
- geringe Auswahl an Datenstrukturen


* Bewertung - persönliche Meinung

- Go ist toll

* Ausblick

*TODO*

* Fragen?
