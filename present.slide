Die Programmiersprache Go
17 Juli 2014

David Damm

Michal Ajchman

* Gliederung

- Geschichte
- Syntax und Semantik
- Vergleich mit C
- Anwendungsbeispiele
- Verbreitung
- Bewertung
- Ausblick

* Geschichte von Go

*TODO*

* Wieso eine neue Sprache?

Go enstand aus der Frust über aktuell benutzte Sprachen zur Systemprogrammierung

Die Hauptsächlichen Problemen:

- C und C++ sind _veraltet_
- in den letzten 10 Jahren _keine_andere_Sprache_ für Systementwicklung

*Lösung:* eine neue Sprache soll entwickelt werden

Ziele für die Sprache:

- schnell in der Ausführung und Kompilierung
- einfach
- hardwarenah
- Unterstützung moderner Konzepte

* Syntax und Semantik - Einführung

*TODO*

* Syntax und Semantik - Semikolons

*TODO*

* Syntax und Semantik - UTF-8

- erste Sprache mit voller Unterstützung für Unicode (UTF-8) Zeichenkodierung
- Sonderzeichen sowohl in Kommentaren, als auch im Code erlaubt

*Beispiel*

.play code/utf8.go


* Syntax und Semantik - Variablen

Variablendeklaration sieht wie folgt aus:

	var name typ

- jede Variable wird mit dem _Nullwert_ initialisiert
- Namen werden in _camelCasing_ geschrieben
- exportierte Variablen fangen mit einem _Großbuschstaben_ an
- Deklarationen mehrerer Variablen können zu Blöcken zusammengefasst werden

*Beispiel*

 var (
 	a int
 	b int
 	str string
 )

* Syntax und Semantik - Variablen

- Typ der Variablen kann vom Go-Compiler _selbst_herausgefunden_ werden
- gleichzeitige Deklaration + Wertzuweisung mit dem Zeichen :=

*Beispiel*

 var a int = 15		var a := 15

- Typangabe auch nicht nötig
- *Aber:* nur innerhalb von Funktionen erlaubt

_Konstanten_

- fangen mit Schlüsselwort _const_ an
- nur vom Typ _bool_,_numerisch_ oder _string_

*Beispiel*

 const a string = "I am a constant..."

* Syntax und Semantik - Datentypen

*TODO*

* Syntax und Semantik - primitive Datentypen

*TODO*

* Syntax und Semantik - Arrays

*TODO*

* Syntax und Semantik - Slices

*TODO*

* Syntax und Semantik - Structs

- _benutzerdefinierte_ Typen
- Struct besitzt mehrere _Attribute_ (Felder) mit Typ und Wert, die ihn beschreiben
- eine Implementierung vom _ADT-Modell_ (Abstract Data Type)

 type name struct {
    feld1 typ1
    feld2 typ2
    …
 }

- Felder vom _beliebigen_Typ_, auch wieder Structs
- Speicher für einen neuen Struct wird mit Schlüsselwort _new_ reserviert

*Beispiel*

 t *T = new (T)
 t := new(T)

* Syntax und Semantik - Structs

*TODO*: Code-Beispiel

* Syntax und Semantik - Zeiger

*TODO*

* Syntax und Semantik - Funktionen

*TODO*

* Syntax und Semantik - Kontrollstrukturen - If-Anweisung

*TODO*

* Syntax und Semantik - Kontrollstrukturen - Schleifen

*TODO*

* Syntax und Semantik - Channels und goroutines

_"Do_not_communicate_by_sharing_memory._Instead,_share_memory_by_communicating."_

